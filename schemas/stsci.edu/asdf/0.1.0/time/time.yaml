%YAML 1.1
---
$schema: "http://stsci.edu/schemas/yaml-schema/draft-01"
id: "http://stsci.edu/schemas/asdf/0.1.0/time/time"
title: Represents an instance in time.
description: |
  A "time" is a single instant in time.  It may explicitly specify the
  way time is represented (the "format") and the "scale" which the
  offset and scaling relation of the unit of time.

  Specific emphasis is placed on supporting time scales (e.g. UTC,
  TAI, UT1, TDB) and time representations (e.g. JD, MJD, ISO 8601)
  that are used in astronomy and required to calculate, e.g., sidereal
  times and barycentric corrections.

  Times may be represented as one of the following:

  - an object, with explicit `value`, and optional `format`, `scale`
    and `location`.

  - a string, in which case the format is guessed from across
    the unambiguous options (`iso`, `byear`, `jyear`, `yday`), and the
    scale is hardcoded to `UTC`.

  In either case, a single time tag may be used to represent an
  n-dimensional array of times, using either an `ndarray` tag or
  inline as (possibly nested) YAML lists.  If YAML lists, the same
  format must be used for all time values [TODO: This is a restriction
  of astropy: Do we need to retain it or should we try to fix that?]

examples:
  -
    - Example ISO time
    - |
        !time/time "2000-12-31T13:05:27.737"

  -
    - Example year, day-of-year and time format time
    - |
        !time/time "2001:003:04:05:06.789"

  -
    - Example Besselian Epoch time
    - |
        !time/time
          value: 2000.0
          format: byear

  -
    - Example list of times
    - |
        !time/time
          ["2000-12-31T13:05:27.737", "2000-12-31T13:06:38.444"]

  -
    - Example array of times
    - |
        !time/time
          value: !core/ndarray
            data: [2000.1, 2000.2, 2000.3]
            datatype: float64
          format: jyear

allOf:
  - tag: "tag:stsci.edu:asdf/0.1.0/time/time"
  - anyOf:
    - type: string
      # TODO: pattern

    - type: array
      # We can't say `items: string` here, since then we'd couldn't
      # have nested lists.

    - $ref: ../core/ndarray

    - type: object
      properties:
        value:
          description: |
            The value(s) of the time.

          anyOf:
            - type: string
            - type: number
            - type: array
            - $ref: ../core/ndarray

        format:
          description: |
            The format of the time.

            If not provided, the the format should be guessed from the
            string from among the following unambiguous options:
            `iso`, `byear`, `jyear` and `yday`.

            The supported formats are:

            - `iso`: ISO 8601 compliant date-time format
              `YYYY-MM-DDTHH:MM:SS.sss...`.  For example,
              `2000-01-01 00:00:00.000` is midnight on January 1,
              2000.  The `T` separating the date from the time
              section is optional.

            - `yday`: Year, day-of-year and time as
              `YYYY:DOY:HH:MM:SS.sss...`. The day-of-year (DOY) goes
              from 001 to 365 (366 in leap years). For example,
              `2000:001:00:00:00.000` is midnight on January 1,
              2000.

            - `byear`: Besselian Epoch year, eg. `B1950.0`.  The `B`
              is optional if the `byear` format is explicitly
              specified.

            - `jyear`: Julian Epoch year, eg. `J2000.0`.  The `J` is
              optional if the `jyear` format is explicitly
              specified.

            - `decimalyear`: Time as a decimal year, with integer
              values corresponding to midnight of the first day of
              each year. For example 2000.5 corresponds to the ISO
              time `2000-07-02 00:00:00`.

            - `jd`: Julian Date time format. This represents the
              number of days since the beginning of the Julian
              Period. For example, 2451544.5 in `jd` is midnight on
              January 1, 2000.

            - `mjd`: Modified Julian Date time format. This
              represents the number of days since midnight on
              November 17, 1858. For example, 51544.0 in MJD is
              midnight on January 1, 2000.

            - `gps`: GPS time: seconds from 1980-01-06 00:00:00 UTC
              For example, 630720013.0 is midnight on January 1,
              2000.

            - `unix`: Unix time: seconds from 1970-01-01 00:00:00
              UTC. For example, 946684800.0 in Unix time is midnight
              on January 1, 2000.  [TODO: Astropy's definition of
              UNIX time doesn't match POSIX's here.  What should we
              do for the purposes of ASDF?]

            - `cxcsec`: Chandra X-ray Center seconds from 1998-01-01
              00:00:00 TT. For example, 63072064.184 is midnight on
              January 1, 2000.  [TODO: Is this general enough to
              include?]

          enum:
            - iso
            - yday
            - byear
            - jyear
            - decimalyear
            - jd
            - mjd
            - gps
            - unix
            - cxcsec

        scale:
          description: |
            The time scale (or time standard) is a specification for
            measuring time: either the rate at which time passes; or
            points in time; or both. See also [3] and [4].

            [TODO: Describing these scales in enough detail to
            reimplement is perhaps too much to do here, but we should
            have good ironclad references for each.]

            The supported time scales are:

            - `utc`: Coordinated Universal Time (UTC).  This is the
              default time scale, except for the formats that
              represents seconds since an epoch, namely `gps`, `unix`
              and `cxcsec`.

            - `tai`: International Atomic Time (TAI).

            - `tcb`: Barycentric Coordinate Time (TCB).

            - `tcg`: Geocentric Coordinate Time (TCG).

            - `tdb`: Barycentric Dynamical Time (TDB).

            - `tt`: Terrestrial Time (TT).

            - `ut1`: Universal Time (UT1).

          enum:
            - utc
            - tai
            - tcb
            - tcg
            - tdb
            - tt
            - ut1

        location:
          description: |
            Specifies the observer location for scales that are
            sensitive to observer location, currently only `tdb`.  May
            be specified either with geocentric coordinates (X, Y, Z)
            or geodetic coordinates (longitude in degrees, latitude in
            degrees, and optional height). [TODO: What are the units
            for geocentric coordinates?]

          anyOf:
            - type: object
              properties:
                x:
                  type: number
                y:
                  type: number
                z:
                  type: number
              requiredProperties: [x, y, z]
            - type: object
              properties:
                longitude:
                  type: number
                  minimum: -180
                  maximum: 180
                latitude:
                  type: number
                  minimum: -90
                  maximum: 90
                height:
                  type: number
                  default: 0
              requiredProperties: [longitude, latitude]

      requiredProperties: value
